/**
 * Generate the example HTML files used to preview exported icons.
 */
import { ExampleFile, IJsonType } from './typings';

/**
 * Create an example project containing HTML, CSS and JS for preview.
 *
 * @param json - Icon metadata list.
 * @param fontName - Name of generated font.
 * @returns Files to be written to disk.
 */
export function generateExample(
  json: IJsonType[],
  fontName: string,
): ExampleFile[] {
  const html = `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Icon Preview</title>
  <link rel="stylesheet" href="style.css">
</head>
<body>
  <header>
    <h1>Icon Preview</h1>
    <p class="intro">To use SVG icons in HTML, you can either embed the SVG code directly into your HTML (inline SVG) or use the &lt;use&gt; element to reference SVG symbols stored elsewhere. Inline SVG offers the most flexibility for styling and customization with CSS, while the &lt;use&gt; element with &lt;symbol&gt; provides a way to reuse SVG icons efficiently.</p>
    <div class="controls">
      <div class="format">
        <label for="format">View as:</label>
        <select id="format">
          <option value="grid">Grid</option>
          <option value="list">List</option>
        </select>
      </div>
      <div class="size">
        <label for="size">Size:</label>
        <select id="size">
          <option value="16">16px</option>
          <option value="32" selected>32px</option>
          <option value="48">48px</option>
          <option value="64">64px</option>
        </select>
      </div>
      <div class="search">
        <label for="search">Search:</label>
        <input id="search" placeholder="search" />
      </div>
    </div>
  </header>
  <div class="container">
  <ul id="icons" class="grid"></ul>
  </div>
  <footer>Generated by <b>Cross Icon Svg</b> on <b>Figma</b></footer>
  <script src="script.js"></script>
</body>
</html>`;

  const css = `:root{--icon-size:32px}@font-face{font-family:'${fontName}';src:url('../${fontName}.woff2') format('woff2'),url('../${fontName}.woff') format('woff'),url('../${fontName}.ttf') format('truetype')}body{font-family:system-ui,sans-serif;margin:0;background:#f9fafb;color:#1f2937;height:100vh;display:flex;flex-direction:column}header{display:flex;flex-direction:column;align-items:flex-start;gap:.5rem;margin-bottom:1rem;padding:20px;background:#f1f1f1}footer{margin-top:auto;padding:20px;background:#f1f1f1}b{font-weight:600}.container{padding:20px}.controls{display:flex;gap:1rem;align-items:center}.search input{padding:2px 6px;border:1px solid #e5e7eb;border-radius:4px}.tags{font-size:12px;color:#6b7280}#icons{display:grid;grid-template-columns:repeat(auto-fill,minmax(150px,1fr));gap:16px;padding:0}#icons.list{grid-template-columns:1fr}#icons li{list-style:none;background:#fff;border:1px solid #e5e7eb;border-radius:8px;padding:12px;display:flex;flex-direction:column;align-items:center;gap:12px;box-shadow:0 1px 2px rgba(0,0,0,.05)}#icons span{max-width:100%;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}#icons li>*:last-child{margin-top:auto}.icon{font-family:'${fontName}';font-size:var(--icon-size);line-height:1;font-feature-settings:'liga';-webkit-font-variant-ligatures:discretionary-ligatures;font-variant-ligatures:discretionary-ligatures}.copy-btn{padding:2px 6px;font-size:12px;border:none;border-radius:4px;background:#e5e7eb;cursor:pointer}.copy-btn:active{background:#d1d5db}`;
  const data = json.map((i) => ({
    name: i.name,
    tags: i.tags ?? [],
    glyph: i.ligature
      ? Array.isArray(i.ligature)
        ? i.ligature[0]
        : i.ligature
      : String.fromCharCode(
          parseInt(
            (Array.isArray(i.unicode) ? i.unicode[0] : i.unicode).replace(
              'u',
              '0x',
            ),
            16,
          ),
        ),
  }));
  const js = `/* eslint-env browser */\n/* global document */\nconst icons=${JSON.stringify(
    data,
  )};\nfunction load(f=''){const list=document.getElementById('icons');list.innerHTML='';icons.filter(icon=>icon.name.toLowerCase().includes(f)||icon.tags.some(t=>t.toLowerCase().includes(f))).forEach(icon=>{const li=document.createElement('li');li.innerHTML='<span class="icon">'+icon.glyph+'</span><span>'+icon.name+'</span><span class="tags">'+icon.tags.join(', ')+'</span><button class="copy-btn" data-name="'+icon.name+'">Copy</button>';li.querySelector("button").addEventListener("click",e=>{const n=e.currentTarget.getAttribute("data-name");navigator.clipboard.writeText(n);e.currentTarget.textContent="Copied!";setTimeout(()=>{e.currentTarget.textContent="Copy"},1e3)});list.appendChild(li);});}document.getElementById('format').addEventListener('change',e=>{document.getElementById('icons').className=e.target.value});document.getElementById('size').addEventListener('change',e=>{document.documentElement.style.setProperty('--icon-size',e.target.value+'px')});document.getElementById('search').addEventListener('input',e=>{load(e.target.value.toLowerCase())});document.getElementById('icons').className='grid';load();`;

  return [
    { name: 'index.html', content: html },
    { name: 'style.css', content: css },
    { name: 'script.js', content: js },
    { name: 'icons.json', content: JSON.stringify(json, null, 2) },
  ];
}
